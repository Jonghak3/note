1. 브렌치가 필요한 이유
   1) 브렌치 (branch)
   2) 예 : 제품 출시

       A => B => c => d

    MS      A => B => C => D => MS
    google  A => B => C => D => GE => GF => GH
    Apple   A => B => C => D => AE
    main    A => B => C => D => E

    - 저장소 마다 버전 관리를 따로 하는 방법

2. 브렌치 살펴보기
    1) 깃으로 버전관리를 시작하며 기본적으로 main
       브렌치가 만들어짐
    2) 브렌치는 커밋을 가리키는 포인터와 비슷함
    3) 새 브렌치 만듦
        - 기존 파일은 main 브렌치에 그대로 유지
        - 새 브렌치에서 기존 파일 내용을 수정, 기능 추가
        - main 브렌치에서 새 브렌치를 만드는 것을
          분기한다(branch)고 함.

3.  브렌치 만들기(이동하기)
      1) git branch
         - 브렌치를 만들거나 학인하는 명령어

      2) 새 커밋을 추가하기

4.  브렌치 전환하기(이동하기)
       1) git switch
         - 브렌치 간에 이동
         - 체크아웃함
       2) 전환한 브렌치에서 커밋하기

5. 브렌치와 커밋의 관계
    1)  git log --oneline --branches
        git log --oneline  --branches --graph

6. 브렌치 간의 차이점 확인하기
    1) git log 브렌치 이름 .. 브렌치 이름
          - 마침표 왼쪽에 있는 브렌치를 기준으로
            오른쪽 브렌치와 비교

7. 브랜치 병합하기
    1) 어느 시점에서는 브렌치 작업을 마무리하고
       기존 브렌치와 합쳐야 함
          - 병합시 여러 상항이 발생할 수 있음
          - 충돌(conflict)시 해결
    2) 서로 다른 파일 병합히기
        - git merge 브렌치명

    3) 서로 다른 브렌치에서 한 문서의 다른 부분을 수정
        병합하기
          - 2개의 브렌치에 서로 다른 문서가 있디면
            브렌치 병합이 쉬움
          - 2개의 브렌치에 같은 문서를 수정한다면 병합결과??

    4) 서로 다른 브렌치에서 한 문서와 같은 부분을
       수정했을 떄 병합하기
          - 브렌치 충돌(conflict)이 발생

8.  병합이 끝난 브렌치 삭제
     1) 더 이상 사용하지 않는 브렌치는 깃에서 삭제 가능함
     2) git branch -d 브렌치명

